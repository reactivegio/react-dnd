{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","React","useState","draggedFrom","draggedTo","isDragging","originalOrder","updatedOrder","dragAndDrop","setDragAndDrop","isOrdered","setIsOrdered","isConfirmed","setIsConfirmed","correct","title","list","setList","onDragStart","event","initialPosition","Number","currentTarget","dataset","position","dataTransfer","setData","onDragOver","preventDefault","newList","itemDragged","remainingItems","filter","item","index","slice","onDrop","renderResult","icon","text","style","marginTop","fontSize","verticalAlign","className","faSmileBeam","faSadCry","map","data-position","draggable","faExchangeAlt","onClick","checkVal","l","length","i","checkIsOrderd","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQA4MeA,MAlMf,WAME,IANa,EAsByBC,IAAMC,SAhBpB,CACtBC,aAAc,EACdC,WAAY,EACZC,YAAY,EACZC,cAAe,GACfC,aAAc,KAXH,mBAsBNC,EAtBM,KAsBOC,EAtBP,OAuBqBR,IAAMC,UAAS,GAvBpC,mBAuBNQ,EAvBM,KAuBKC,EAvBL,OAwByBV,IAAMC,UAAS,GAxBxC,mBAwBNU,EAxBM,KAwBOC,EAxBP,OA0BWZ,IAAMC,SAZhB,CACZ,CAAEY,QAAS,EAAGC,MAAO,gBACrB,CAAED,QAAS,EAAGC,MAAO,qBACrB,CAAED,QAAS,EAAGC,MAAO,qBACrB,CAAED,QAAS,EAAGC,MAAO,mBACrB,CAAED,QAAS,EAAGC,MAAO,kBAnBV,mBA0BNC,EA1BM,KA0BAC,EA1BA,KA4CPC,EAAc,SAACC,GAOnB,IAAMC,EAAkBC,OAAOF,EAAMG,cAAcC,QAAQC,UAE3Df,EAAe,2BAGVD,GAHS,IAIZL,YAAaiB,EACbf,YAAY,EACZC,cAAeU,KAIjBG,EAAMM,aAAaC,QAAQ,YAAa,KAGpCC,EAAa,SAACR,GAMlBA,EAAMS,iBAEN,IAAIC,EAAUrB,EAAYF,cAGpBH,EAAcK,EAAYL,YAG1BC,EAAYiB,OAAOF,EAAMG,cAAcC,QAAQC,UAG/CM,EAAcD,EAAQ1B,GAGtB4B,EAAiBF,EAAQG,QAC7B,SAACC,EAAMC,GAAP,OAAiBA,IAAU/B,KAI7B0B,EAAO,sBACFE,EAAeI,MAAM,EAAG/B,IADtB,CAEL0B,GAFK,YAGFC,EAAeI,MAAM/B,KAKtBA,IAAcI,EAAYJ,WAC5BK,EAAe,2BACVD,GADS,IAIZD,aAAcsB,EACdzB,UAAWA,MAKXgC,EAAS,WAIbnB,EAAQT,EAAYD,cAGpBE,EAAe,2BACVD,GADS,IAEZL,aAAc,EACdC,WAAY,EACZC,YAAY,MAIVgC,EAAe,SAACC,EAAgBC,GACpC,OACE,sBAAKC,MAAO,CAAEC,UAAW,OAAQC,SAAU,QAA3C,UACG,IACD,cAAC,IAAD,CACEF,MAAO,CAAEE,SAAU,OAAQC,cAAe,UAC1CL,KAAMA,IACL,IACFC,MAIP,OACE,sBAAKK,UAAU,MAAf,UACE,8DACA,+DACEhC,EA4CEF,EACF2B,EAAaQ,IAAa,8CAEtBR,EAAaS,IAAU,uBA9C3B,oCACE,oBAAIF,UAAU,oBAAd,SACG5B,EAAK+B,KAAI,SAACd,EAAMC,GACf,OACE,oBACEU,UACEpC,GAAeA,EAAYJ,YAAciB,OAAOa,GAC5C,WACA,GAENc,gBAAed,EAEfe,UAAU,OACV/B,YAAaA,EACbS,WAAYA,EACZS,OAAQA,EAXV,SAaE,gCACG5B,GAAeA,EAAYJ,YAAciB,OAAOa,GAC/C,8BACE,cAAC,IAAD,CACEM,MAAO,CAAEE,SAAU,QACnBJ,KAAMY,QAGR,KACHjB,EAAKlB,UAfHmB,QAqBb,qBACEU,UAAU,aACVO,QAAS,WACP,IAAMC,EAlJI,WAEpB,IADA,IAAMC,EAAIrC,EAAKsC,OACNC,EAAI,EAAGA,EAAIF,EAAI,EAAI,EAAGE,IAC7B,GACEvC,EAAKuC,EAAI,GAAGzC,QAAUE,EAAKuC,GAAGzC,SAC9BE,EAAKqC,EAAIE,GAAGzC,QAAUE,EAAKqC,EAAIE,EAAI,GAAGzC,QAEtC,OAAO,EAGX,OAAO,EAwI6B0C,GAC1B7C,EAAayC,GACbvC,GAAe,IALnB,kCC1KK4C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6e95ab3a.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faExchangeAlt,\n  faSadCry,\n  faSmileBeam,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./App.css\";\nimport { IconProp } from \"@fortawesome/fontawesome-svg-core\";\n\nfunction App() {\n  interface ItemDraggable {\n    correct: number;\n    title: string;\n  }\n\n  const initialDnDState = {\n    draggedFrom: -1 as number,\n    draggedTo: -1 as number,\n    isDragging: false as boolean,\n    originalOrder: [] as ItemDraggable[],\n    updatedOrder: [] as ItemDraggable[],\n  };\n\n  const items = [\n    { correct: 3, title: \"Oil the fish\" },\n    { correct: 5, title: \"Serve and garnish\" },\n    { correct: 2, title: \"Stuff for flavour\" },\n    { correct: 1, title: \"Making the cuts\" },\n    { correct: 4, title: \"Cooking time\" },\n  ];\n\n  const [dragAndDrop, setDragAndDrop] = React.useState(initialDnDState);\n  const [isOrdered, setIsOrdered] = React.useState(false);\n  const [isConfirmed, setIsConfirmed] = React.useState(false);\n  // The initial state of \"list\" is going to be the static \"items\" array\n  const [list, setList] = React.useState(items);\n\n  /**\n   * Check if items is ordered when confirm button is checked\n   */\n  const checkIsOrderd = () => {\n    const l = list.length;\n    for (let i = 1; i < l / 2 + 1; i++) {\n      if (\n        list[i - 1].correct > list[i].correct ||\n        list[l - i].correct < list[l - i - 1].correct\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const onDragStart = (event: React.DragEvent<HTMLLIElement>) => {\n    // It receives a DragEvent which inherits properties from MouseEvent and Event\n    // so we can access the element through event.currentTarget\n\n    // Later, we'll save in a hook the item being dragged\n\n    // We'll access the \"data-position\" attribute of the current element dragged\n    const initialPosition = Number(event.currentTarget.dataset.position);\n\n    setDragAndDrop({\n      // we spread the previous content of the hook\n      // so we don't override the properties not being updated\n      ...dragAndDrop,\n      draggedFrom: initialPosition, // set the draggedFrom position\n      isDragging: true,\n      originalOrder: list, // store the current state of \"list\"\n    });\n\n    // Note: this is only for Firefox. Without it, the DnD won't work.\n    event.dataTransfer.setData(\"text/html\", \"\");\n  };\n\n  const onDragOver = (event: any) => {\n    // It also receives a DragEvent. Later, we'll read the position of the item from event.currentTarget\n    // and store the updated list state\n\n    // We need to prevent the default behavior of this event, in order for the onDrop event to fire.\n    // the default is to cancel out the drop.\n    event.preventDefault();\n    // Store the content of the original list in this variable that we'll update\n    let newList = dragAndDrop.originalOrder;\n\n    // index of the item being dragged\n    const draggedFrom = dragAndDrop.draggedFrom;\n\n    // index of the drop area being hovered\n    const draggedTo = Number(event.currentTarget.dataset.position);\n\n    // get the element that's at the position of \"draggedFrom\"\n    const itemDragged = newList[draggedFrom];\n\n    // filter out the item being dragged\n    const remainingItems = newList.filter(\n      (item, index) => index !== draggedFrom\n    );\n\n    // update the list\n    newList = [\n      ...remainingItems.slice(0, draggedTo),\n      itemDragged,\n      ...remainingItems.slice(draggedTo),\n    ];\n\n    // since this event fires many times\n    // we check if the targets are actually different:\n    if (draggedTo !== dragAndDrop.draggedTo) {\n      setDragAndDrop({\n        ...dragAndDrop,\n        // save the updated list state\n        // we will render this onDrop\n        updatedOrder: newList,\n        draggedTo: draggedTo,\n      });\n    }\n  };\n\n  const onDrop = () => {\n    // - update the rendered list\n    // - reset the DnD state\n    // we use the updater function for hook\n    setList(dragAndDrop.updatedOrder);\n\n    // and reset the state of the DnD\n    setDragAndDrop({\n      ...dragAndDrop,\n      draggedFrom: -1,\n      draggedTo: -1,\n      isDragging: false,\n    });\n  };\n\n  const renderResult = (icon: IconProp, text: string) => {\n    return (\n      <div style={{ marginTop: \"50px\", fontSize: \"30px\" }}>\n        {\" \"}\n        <FontAwesomeIcon\n          style={{ fontSize: \"40px\", verticalAlign: \"middle\" }}\n          icon={icon}\n        />{\" \"}\n        {text}\n      </div>\n    );\n  };\n  return (\n    <div className=\"App\">\n      <h1>How to barbecue a whole fish</h1>\n      <h5>drag & drop to sort correctly</h5>\n      {!isConfirmed ? (\n        <section>\n          <ul className=\"fileListContainer\">\n            {list.map((item, index) => {\n              return (\n                <li\n                  className={\n                    dragAndDrop && dragAndDrop.draggedTo === Number(index)\n                      ? \"dropArea\"\n                      : \"\"\n                  }\n                  data-position={index}\n                  key={index}\n                  draggable=\"true\"\n                  onDragStart={onDragStart}\n                  onDragOver={onDragOver}\n                  onDrop={onDrop}\n                >\n                  <div>\n                    {dragAndDrop && dragAndDrop.draggedTo === Number(index) ? (\n                      <div>\n                        <FontAwesomeIcon\n                          style={{ fontSize: \"20px\" }}\n                          icon={faExchangeAlt}\n                        />\n                      </div>\n                    ) : null}\n                    {item.title}\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <div\n            className=\"btnConfirm\"\n            onClick={() => {\n              const checkVal: boolean = checkIsOrderd();\n              setIsOrdered(checkVal);\n              setIsConfirmed(true);\n            }}\n          >\n            CONFIRM ORDER\n          </div>\n        </section>\n      ) : isOrdered ? (\n        renderResult(faSmileBeam, \"Congratulation this is the correct order!!\")\n      ) : (\n            renderResult(faSadCry, \"The order is wrong!\")\n          )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}